// Generated by gencpp from file project7/Navigate2DGoal.msg
// DO NOT EDIT!


#ifndef PROJECT7_MESSAGE_NAVIGATE2DGOAL_H
#define PROJECT7_MESSAGE_NAVIGATE2DGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace project7
{
template <class ContainerAllocator>
struct Navigate2DGoal_
{
  typedef Navigate2DGoal_<ContainerAllocator> Type;

  Navigate2DGoal_()
    : point()  {
    }
  Navigate2DGoal_(const ContainerAllocator& _alloc)
    : point(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _point_type;
  _point_type point;





  typedef boost::shared_ptr< ::project7::Navigate2DGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::project7::Navigate2DGoal_<ContainerAllocator> const> ConstPtr;

}; // struct Navigate2DGoal_

typedef ::project7::Navigate2DGoal_<std::allocator<void> > Navigate2DGoal;

typedef boost::shared_ptr< ::project7::Navigate2DGoal > Navigate2DGoalPtr;
typedef boost::shared_ptr< ::project7::Navigate2DGoal const> Navigate2DGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::project7::Navigate2DGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::project7::Navigate2DGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace project7

namespace ros
{
namespace message_traits
{



// BOOLTRAITS OrderedDict([('IsMessage', True), ('IsFixedSize', True), ('HasHeader', False)])

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::project7::Navigate2DGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project7::Navigate2DGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project7::Navigate2DGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project7::Navigate2DGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project7::Navigate2DGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project7::Navigate2DGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::project7::Navigate2DGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a7c84ff13976aa04656e56e300124444";
  }

  static const char* value(const ::project7::Navigate2DGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa7c84ff13976aa04ULL;
  static const uint64_t static_value2 = 0x656e56e300124444ULL;
};

template<class ContainerAllocator>
struct DataType< ::project7::Navigate2DGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "project7/Navigate2DGoal";
  }

  static const char* value(const ::project7::Navigate2DGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::project7::Navigate2DGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Goal\n"
"geometry_msgs/Point point\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::project7::Navigate2DGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::project7::Navigate2DGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Navigate2DGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::project7::Navigate2DGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::project7::Navigate2DGoal_<ContainerAllocator>& v)
  {
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJECT7_MESSAGE_NAVIGATE2DGOAL_H
